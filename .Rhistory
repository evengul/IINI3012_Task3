save.image("C:\\Users\\Even\\Documents\\R\\IINI3012_Task3\\main")
setwd("C:\\Users\\Even\\Documents\\R\\IINI3012_Task3")
dishes <- read.csv(file = "dishes.csv")
head(dishes)
dishes <- read.csv(file = "dishes.csv", sep=";")
head(dishes)
mean(dishes)
mean(dishes[["Score"]])
aggregate(dishes[["Score"]], list(dishes$Dish), mean)
dishMeans = aggregate(dishes[["Score"]], list(dishes$Dish), mean)
dishMeans
hist(dishMeans$x, xlab='Mean score for dish', labels=levels(dishMeans$Group.1))
barplot(dishMeans$x)
barplot(dishMeans$x, main="Mean scores per dish")
barplot(dishMeans$x, main="Mean scores per dish", xlab="Dish", ylab="Mean")
barplot(dishMeans$x, main="Mean scores per dish", xlab="Dish", ylab="Mean", names.arg=dishMeans[["Group.1"]])
par(las=2)
par(mar=c(5,8,4,2))
barplot(dishMeans$x, main="Mean scores per dish", xlab="Dish", ylab="Mean", names.arg=dishMeans[["Group.1"]])
barplot(dishMeans$x, main="Mean scores per dish", ylab="Mean", names.arg=dishMeans[["Group.1"]])
barplot(dishMeans$x, main="Mean scores per dish", ylab="Mean", names.arg=dishMeans[["Group.1"]], color="blue")
barplot(dishMeans$x, main="Mean scores per dish", ylab="Mean", names.arg=dishMeans[["Group.1"]], col="blue")
barplot(dishMeans$x, main="Mean scores per dish", ylab="Mean", names.arg=dishMeans[["Group.1"]], col=c("blue", "red"))
setwd("C:\\Users\\Even\\Documents\\R\\IINI3012_Task3")
dishes <- read.csv(file = "dishes.csv", sep=";")
dishMeans = aggregate(dishes[["Score"]], list(dishes$Dish), mean)
par(las=2)
par(mar=c(5,8,4,2))
barplot(dishMeans$x, main="Mean scores per dish", ylab="Mean", names.arg=dishMeans[["Group.1"]], col=c("blue", "red"))
dishes
dishes[0,2]
dishes[0:2]
dishes[-1]
dishes[-0]
dishes[-2]
peopleScores = dishes[-2]
peopleScores
require(class)
knn
data.matrix(peopleScores)
dishMeans
peopleMean = aggregate(dishes[["Score"]], list(dishes$Name), mean)
peopleMean = aggregate(dishes[["Score"]], list(dishes$UserName), mean)
peopleMean
head(peopleMean)
clear
clear()
peopleMeans
setwd("C:\\Users\\Even\\Documents\\R\\IINI3012_Task3")
scores = read.csv(file="dishes.csv, sep=";")
scores = read.csv(file='dishes.csv', sep=';')
head(scores)
require(reshape2)
install("reshape2")
utils:::menuInstallPkgs()
install.packages("reshape2")
require(reshape2)
wideScores = dcast(scores, UserName ~ Dish)
wideScores
head(wideScores)
users <- wideScores[,1]
head(users)
wideScores = wideScores[,-1]
head(wideScores)
d = dist(wideScores, method="euclidean")
d
wideScores <- as.matrix(wideScores)
wideScores
d <- as.matrix(d)
d
fit <- cmdscale(d, eig=TRUE, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="x", ylab="y", main="Usernames", type="n")
text(x,y,labels=users,cex=.7)
fit
knn(list(fit$points[,1], fit$points[,2]), c(0,0), k=3)
knn(list(fit$points[,1], fit$points[,2]), c(0,0), users, k=3)
knn(wideScores[,2:3], c(0,0), wideScores[,1],k=4)
wideScores
wideScores[is.na(wideScores)] <-0
wideScores
knn(wideScores[,2:3], c(0,0), wideScores[,1],k=4)
setwd("C:\\Users\\Even\\Documents\\R\\IINI3012_Task3")
scores = read.csv(file='dishes.csv', sep=';')
require(reshape2)
wideScores = dcast(scores, UserName ~ Dish)
users <- wideScores[,1]
wideScores <- wideScores[,-1]
d = dist(wideScores, method="euclidian")
d <- as.matrix(d)
fit <- cmdscale(d, eig=TRUE, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="x", ylab="y", main="Usernames", type="n")
text(x,y,labels=users,cex=.7)
require(class)
wideScores[is.na(wideScores)]
wideScores[is.na(wideScores)] <- 0
wideScores[is.na(wideScores)]
knn(scores[,2:3], c(0,0), scores[,1], k=4)
scores[is.na(scores)]
scores
wideScores
knn(wideScores[,2:19], c(3,4,4,4,4,4,4,2,3,3,1,5,5,5,4,4,3,4,4), wideScores[,1], k=4)
dims(wideScores)
dim(wideScores)
knn(wideScores, c(3,4,4,4,4,4,4,2,3,3,1,5,5,5,4,4,3,4,4), users, k=4)
dim(wideScores)
dim(users)
users
len(users)
length(users)
knn(wideScores[,1:19], c(3,4,4,4,4,4,4,2,3,3,1,5,5,5,4,4,3,4,4), users, k=4)
knn(wideScores[,1:19], c(3,4,4,4,4,4,4,2,3,3,1,5,5,5,4,4,3,4,4), users, k=5)
result = knn(wideScores[,1:19], c(3,4,4,4,4,4,4,2,3,3,1,5,5,5,4,4,3,4,4), users, k=5)
result
scores
d
recommendation <- function(me, d, R, k) {
ordered.neighbours <- order(d[me,])
nearest.neighbours <- ordered.neighbours[ordered.neighbours != me]
nearest.neighbours <- ordered.neighbours[0:k]
}
delete
scores = read.csv("dishes.csv")
head(scores=
)
scores <- read.csv("dishes.csv")
head(scores)
scores <- read.csv("dishes.csv", sep=";")
head(scores)
require(reshape2)
R <- dcast(scores, Username ~ Dish)
R <- dcast(scores, UserName ~ Dish)
head(R)
users <- R[,1]
R <- R[-1]
d <- dist(R, method="euclidian")
d <- as.matrix(d)
head(d)
users
recommendGuest <- function(me, d, R, k){
ordered.neighbours <- order(d[me,])
ordered.neighbours <- orderded.neighbours[ordered.neighbours != me]
nearest.neighbours <- ordered.neighbours[0:k]
scores <- R
scores[is.na(scores)] <- 0
rec <- matrix(0, ncol = ncol(scores), nrow=1)
for (i in nearest.neighbours){
    dist <- d[me, i]
    weight <- 1 / (1 + dist)
    rec <- rec + (ratings[i,] * weight)
}
rec <- rec[order(-rec)]
return(rec)
}
recommendation(me=1, d, R, k=3)
recommendGuest(me=1, d, R, k=3)
recommendGuest(me=1, d, R, k=3)
 recommendGuest <- function(me, d, R, k){
+ ordered.neighbours <- order(d[me,])
+ ordered.neighbours <- orderded.neighbours[ordered.neighbours != me]
+ nearest.neighbours <- ordered.neighbours[0:k]
+ scores <- R
+ scores[is.na(scores)] <- 0
+ rec <- matrix(0, ncol = ncol(scores), nrow=1)
+ for (i in nearest.neighbours){
+     dist <- d[me, i]
+     weight <- 1 / (1 + dist)
+     rec <- rec + (ratings[i,] * weight)
+ }
+ rec <- rec[order(-rec)]
+ return(rec)
recommendGuest <- function(me, d, R, k){
+ + ordered.neighbours <- order(d[me,])
+ + ordered.neighbours <- orderded.neighbours[ordered.neighbours != me]
+ + nearest.neighbours <- ordered.neighbours[0:k]
+ + scores <- R
+ + scores[is.na(scores)] <- 0
+ + rec <- matrix(0, ncol = ncol(scores), nrow=1)
+ + for (i in nearest.neighbours){
+ +     dist <- d[me, i]
+ +     weight <- 1 / (1 + dist)
+ +     weight <- 1 / (1 + dist)
recommendGuest <- function(me, d, R, k){
+ + ordered.neighbours <- order(d[me,])
+ + ordered.neighbours <- orderded.neighbours[ordered.neighbours != me]
+ + nearest.neighbours <- ordered.neighbours[0:k]
+ + scores <- R
+ + scores[is.na(scores)] <- 0
+ + rec <- matrix(0, ncol = ncol(scores), nrow=1)
+ + for (i in nearest.neighbours){
+ +     dist <- d[me, i]
+ +     weight <- 1 / (1 + dist)
+ +     weight <- 1 / (1 + dist)
recommendGuest <- function(me, d, R, k){
ordered.neighbours <- order(d[m1,])
ordered.neighbours <- ordered.neighbours[ordered.neighbours != me]
nearest.neighbours <- ordered.neighbours[0:k]
scores <- R
scores[is.na(scores)] <- 0
rec <- matrix(0, ncol=ncol(scores),nrow=1)
for (i in nearest.neighbours){
dist <- d[me, i]
weight <- 1 / (1 + dist)
rec <- rec + (ratings[i,] * weight)
}
rec <- rec[order(-rec)]
return(rec)
}
recommendGuest(me=2, d, R, k=3)
recommendGuest <- function(me, d, R, k){
ordered.neighbours <- order(d[me,])
ordered.neighbours <- ordered.neighbours[ordered.neighbours != me]
nearest.neighbours <- ordered.neighbours[0:k]
scores <- R
scores[is.na(scores)] <- 0
rec <- matrix(0, ncol=ncol(scores),nrow=1)
for (i in nearest.neighbours){
dist <- d[me, i]
weight <- 1 / (1 + dist)
rec <- rec + (ratings[i,] * weight)
recommendGuest <- function(me, d, R, k){
ordered.neighbours <- order(d[me,])
ordered.neighbours <- ordered.neighbours[ordered.neighbours != me]
nearest.neighbours <- ordered.neighbours[0:k]
scores <- R
scores[is.na(scores)] <- 0
rec <- matrix(0, ncol=ncol(scores),nrow=1)
for (i in nearest.neighbours){
dist <- d[me, i]
weight <- 1 / (1 + dist)
rec <- rec + (scores[i,] * weight)
}
rec <- rec[order(-rec)]
return(rec)
}
recommendGuest <- function(me, d, R, k){
recommendGuest
recommendGuest(me=2, d, R, k=3)
q()
